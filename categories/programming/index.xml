<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Programming on zhoukuncheng's Personal Blog</title><link>https://zhoukuncheng.github.io/categories/programming/</link><description>Recent content in Programming on zhoukuncheng's Personal Blog</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Fri, 19 Apr 2024 00:11:00 +0800</lastBuildDate><atom:link href="https://zhoukuncheng.github.io/categories/programming/index.xml" rel="self" type="application/rss+xml"/><item><title>借助 LLM 和 Telegram 机器人，让背单词不再枯燥</title><link>https://zhoukuncheng.github.io/posts/llm-vocabulary-reminder/</link><pubDate>Fri, 19 Apr 2024 00:11:00 +0800</pubDate><guid>https://zhoukuncheng.github.io/posts/llm-vocabulary-reminder/</guid><description>背英语单词总是 Abandon？ 向多邻国 🦉 取经，让单词主动提醒自己 背单词，在英语学习中实在无法避免，从小学到研究生，甚至工作需要。 但抱着单词书啃，或者手机上一板一眼背单词，效率实在太低。现在 LLM 这么火，为何不利用起来？ 毕竟 LLM 中间的 L 就是 Language 的意思，LLM 对付其他严谨任务可能差点意思，但英语等语言可是它的强项，能用技术解决问题，就不要麻烦自己！ 本文就来分享一下，怎么用欧路词典 API、LLM 和 Telegram 机器人搞个英</description></item><item><title>Traefik Architecture and Source Code Analysis: A Deep Dive</title><link>https://zhoukuncheng.github.io/posts/traefik-architecture-and-source-code-analysis/</link><pubDate>Sat, 09 Mar 2024 14:54:00 +0800</pubDate><guid>https://zhoukuncheng.github.io/posts/traefik-architecture-and-source-code-analysis/</guid><description>Traefik is a widely adopted open-source HTTP reverse proxy and load balancer that simplifies the routing and load balancing of requests for modern web applications. It boasts dynamic configuration capabilities and supports a multitude of providers, positioning itself as a versatile solution for orchestrating complex deployment scenarios. In this blog post, we will delve into the architecture of Traefik and dissect the key components of its source code to furnish a more nuanced understanding of its operational mechanics.
Traefik Architecture: A High-Level Overview At its core, Traefik&amp;rsquo;s architecture is composed of several integral components that collaborate to facilitate dynamic routing and load balancing:
Static Configuration: These are foundational settings for Traefik, encompassing entry points, providers, and API access configurations. They can be specified via file, command-line arguments, or environment variables.
Dynamic Configuration: This pertains to the routing rules, services, and middlewares that are adaptable based on the state of the infrastructure. Traefik&amp;rsquo;s compatibility with a myriad of providers, such as Docker, Kubernetes, Consul Catalog, among others, underscores its dynamism.
Providers: Acting as the bridge between Traefik and service discovery mechanisms, providers are tasked with sourcing and conveying dynamic configuration to Traefik. Each provider is tailored to integrate with different technologies like Docker, Kubernetes, and Consul.</description></item><item><title>Streamlining Real-Time Data: Master HTML5 SSE like ChatGPT</title><link>https://zhoukuncheng.github.io/posts/html5-sse/</link><pubDate>Sat, 30 Dec 2023 23:11:34 +0800</pubDate><guid>https://zhoukuncheng.github.io/posts/html5-sse/</guid><description>Introduction In the age of real-time interactivity where services like ChatGPT excel, it&amp;rsquo;s crucial for developers to leverage technologies that allow for seamless data streaming in their applications. This article will delve into the world of HTML5 Server-Sent Events (SSE), a powerful tool akin to the technology behind conversational AI interfaces. Similar to how ChatGPT streams data to provide instant responses, SSE enables web browsers to receive updates from a server without the need for repetitive client-side requests. Whether you&amp;rsquo;re building a chat application, a live notification system, or any service requiring real-time data flow, this guide will equip you with the knowledge to implement SSE efficiently in your applications, ensuring a responsive and engaging user experience.
Understanding Server-Sent Events (SSE) Server-Sent Events (SSE) is a web technology that facilitates the server&amp;rsquo;s ability to send real-time updates to clients over an established HTTP connection. Clients can receive a continuous data stream or messages via the EventSource JavaScript API, which is incorporated in the HTML5 specification by WHATWG. The official media type for SSE is text/event-stream.
Here is an illustrative example of a typical SSE response:
event:message data:The Current Time Is 2023-12-30 23:00:21 event:message data:The Current Time Is 2023-12-30 23:00:31 event:message data:The Current Time Is 2023-12-30 23:00:41 event:message data:The Current Time Is 2023-12-30 23:00:51 Fields in SSE Messages Messages transmitted via SSE may contain the following fields:</description></item></channel></rss>